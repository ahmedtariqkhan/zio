"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[35539],{28935:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>c,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"zio-dynamodb/codec-customization","title":"Codec Customization","description":"Sealed trait members that are case classes","source":"@site/docs/zio-dynamodb/codec-customization.md","sourceDirName":"zio-dynamodb","slug":"/zio-dynamodb/codec-customization","permalink":"/zio-dynamodb/codec-customization","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-dynamodb/codec-customization.md","tags":[],"version":"current","frontMatter":{"id":"codec-customization","title":"Codec Customization"},"sidebar":"ecosystem-sidebar","previous":{"title":"Getting Started","permalink":"/zio-dynamodb/getting-started"},"next":{"title":"Transactions","permalink":"/zio-dynamodb/transactions"}}');var a=i(74848),s=i(28453);const c={id:"codec-customization",title:"Codec Customization"},r="Default encoding",o={},d=[{value:"Sealed trait members that are case classes",id:"sealed-trait-members-that-are-case-classes",level:2},{value:"Sealed trait members that are case objects",id:"sealed-trait-members-that-are-case-objects",level:2},{value:"Sealed trait members that are case classes",id:"sealed-trait-members-that-are-case-classes-1",level:2},{value:"Sealed trait members that are all case objects",id:"sealed-trait-members-that-are-all-case-objects",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"default-encoding",children:"Default encoding"})}),"\n",(0,a.jsx)(t.h2,{id:"sealed-trait-members-that-are-case-classes",children:"Sealed trait members that are case classes"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-scala",children:"sealed trait TrafficLight\nfinal case class Green(rgb: Int) extends TrafficLight \nfinal case class Red(rgb: Int) extends TrafficLight\nfinal case class Box(trafficLightColour: TrafficLight)\n"})}),"\n",(0,a.jsxs)(t.p,{children:["The default encoding for ",(0,a.jsx)(t.code,{children:"Box(Green(42))"})," is:"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.code,{children:"Map(trafficLightColour -> Map(String(Green) -> Map(String(rgb) -> Number(42))))"})}),"\n",(0,a.jsxs)(t.p,{children:["Here an intermediate map is used to identify the member of ",(0,a.jsx)(t.code,{children:"TraficLight"})," using the member class name ie ",(0,a.jsx)(t.code,{children:"Map(String(Green) -> Map(...))"})]}),"\n",(0,a.jsx)(t.h2,{id:"sealed-trait-members-that-are-case-objects",children:"Sealed trait members that are case objects"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-scala",children:"sealed trait TrafficLight\ncase object GREEN extends TrafficLight \ncase object RED extends TrafficLight\nfinal case class Box(trafficLightColour: TrafficLight)\n"})}),"\n",(0,a.jsxs)(t.p,{children:["The default encoding for ",(0,a.jsx)(t.code,{children:"Box(GREEN)"})," is:"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.code,{children:"Map(trafficLightColour -> Map(String(GREEN) -> Null))"})}),"\n",(0,a.jsxs)(t.p,{children:["Here an intermediate map is used to identify the member of ",(0,a.jsx)(t.code,{children:"TraficLight"})," ie ",(0,a.jsx)(t.code,{children:"Map(String(GREEN) -> Null)"}),"\nNote that the ",(0,a.jsx)(t.code,{children:"Null"})," is used as in this case we do not care about the value."]}),"\n",(0,a.jsx)(t.h1,{id:"customising-encodings-via-annotations",children:"Customising encodings via annotations"}),"\n",(0,a.jsxs)(t.p,{children:["Encodings can be customised through the use of the following annotations ",(0,a.jsx)(t.code,{children:"@discriminator"}),", ",(0,a.jsx)(t.code,{children:"@enumOfCaseObjects"})," and ",(0,a.jsx)(t.code,{children:"@id"}),".\nThese annotations are useful when working with a legacy DynamoDB database."]}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"@discriminator"})," encodings does not introduce another map for the purposes of identification but rather adds another\ndiscriminator field to the attribute Map."]}),"\n",(0,a.jsxs)(t.p,{children:["Concrete examples of using the ",(0,a.jsx)(t.code,{children:"@discriminator"}),", ",(0,a.jsx)(t.code,{children:"@enumOfCaseObjects"})," and ",(0,a.jsx)(t.code,{children:"@id"})," annotations can be seen below."]}),"\n",(0,a.jsx)(t.h2,{id:"sealed-trait-members-that-are-case-classes-1",children:"Sealed trait members that are case classes"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-scala",children:'@discriminator("light_type")\nsealed trait TrafficLight\nfinal case class Green(rgb: Int) extends TrafficLight\n@id("red_traffic_light")\nfinal case class Red(rgb: Int) extends TrafficLight\nfinal case class Amber(@id("red_green_blue") rgb: Int) extends TrafficLight\nfinal case class Box(trafficLightColour: TrafficLight)\n'})}),"\n",(0,a.jsxs)(t.p,{children:["encoding for an instance of ",(0,a.jsx)(t.code,{children:"Box(Green(42))"})," would be:"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.code,{children:"Map(trafficLightColour -> Map(String(rgb) -> Number(42), String(light_type) -> String(Green)))"})}),"\n",(0,a.jsxs)(t.p,{children:["We can specify the field name used to identify the case class through the ",(0,a.jsx)(t.code,{children:"@discriminator"})," annotation. The discriminator\nencoding removes the intermediate map and inserts a new field with a name specified by discriminator annotation and a\nvalue that identifies the member which defaults to the class name."]}),"\n",(0,a.jsxs)(t.p,{children:["This can be further customised using the ",(0,a.jsx)(t.code,{children:"@id"})," annotation - encoding for an instance of ",(0,a.jsx)(t.code,{children:"Box(Red(42))"})," would be:"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.code,{children:"Map(trafficLightColour -> Map(String(rgb) -> Number(42), String(light_type) -> String(red_traffic_light)))"})}),"\n",(0,a.jsxs)(t.p,{children:["The encoding for case class field names can also be customised via ",(0,a.jsx)(t.code,{children:"@id"})," - encoding for an instance of ",(0,a.jsx)(t.code,{children:"Box(Amber(42))"})," would be:"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.code,{children:"Map(trafficLightColour -> Map(String(red_green_blue) -> Number(42), String(light_type) -> String(Amber)))"})}),"\n",(0,a.jsx)(t.h2,{id:"sealed-trait-members-that-are-all-case-objects",children:"Sealed trait members that are all case objects"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-scala",children:'@enumOfCaseObjects\nsealed trait TrafficLight\ncase object GREEN extends TrafficLight \n@id("red_traffic_light")\ncase object RED extends TrafficLight\nfinal case class Box(trafficLightColour: TrafficLight)\n'})}),"\n",(0,a.jsxs)(t.p,{children:["We can get a more compact and intuitive encoding of trait members that are case objects by using the ",(0,a.jsx)(t.code,{children:"@enumOfCaseObjects"}),"\nannotation which encodes to just a value that is the member name. Encoding for an instance of ",(0,a.jsx)(t.code,{children:"Box(GREEN)"})," would be:"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.code,{children:"Map(trafficLightColour -> String(GREEN))"})}),"\n",(0,a.jsxs)(t.p,{children:["This can be further customised by using the ",(0,a.jsx)(t.code,{children:"@id"})," annotation again - encoding for ",(0,a.jsx)(t.code,{children:"Box(RED)"})," would be"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.code,{children:"Map(trafficLightColour -> String(red_traffic_light))"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},28453:(e,t,i)=>{i.d(t,{R:()=>c,x:()=>r});var n=i(96540);const a={},s=n.createContext(a);function c(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);