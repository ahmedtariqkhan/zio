"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[44931],{64588:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"zio-dynamodb/transactions","title":"DynamoDB Transactions","description":"Transactions are as simple as calling the .transact method on a DynamoDBQuery. As long as every component of the query is a valid transaction item and the DyanmoDBQuery does not have a mix of get and write transaction items. A list of valid items for both types of queries is listed below.","source":"@site/docs/zio-dynamodb/transactions.md","sourceDirName":"zio-dynamodb","slug":"/zio-dynamodb/transactions","permalink":"/zio-dynamodb/transactions","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-dynamodb/transactions.md","tags":[],"version":"current","frontMatter":{"id":"transactions","title":"DynamoDB Transactions","sidebar_label":"Transactions"},"sidebar":"ecosystem-sidebar","previous":{"title":"Codec Customization","permalink":"/zio-dynamodb/codec-customization"},"next":{"title":"ZIO FTP","permalink":"/zio-ftp/"}}');var i=n(74848),s=n(28453);const l={id:"transactions",title:"DynamoDB Transactions",sidebar_label:"Transactions"},r=void 0,o={},c=[{value:"Examples",id:"examples",level:2},{value:"Write Transactions",id:"write-transactions",level:3},{value:"ReadTransactions",id:"readtransactions",level:3},{value:"Transaction Failures",id:"transaction-failures",level:2},{value:"Valid Transact Write Items",id:"valid-transact-write-items",level:3},{value:"Valid Transact Get Item",id:"valid-transact-get-item",level:3}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["Transactions are as simple as calling the ",(0,i.jsx)(t.code,{children:".transact"})," method on a ",(0,i.jsx)(t.code,{children:"DynamoDBQuery"}),". As long as every component of the query is a valid transaction item and the ",(0,i.jsx)(t.code,{children:"DyanmoDBQuery"})," does not have a mix of get and write transaction items. A list of valid items for both types of queries is listed below."]}),"\n",(0,i.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(t.h3,{id:"write-transactions",children:"Write Transactions"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:'final case class Bill(studentEmail: String, semesters: Int)\n\nval student = Student("avi@gmail.com", "maths")\nval bill = Bill("avi@gmail.com", 1)\n\nval putStudent = put("student", student)\nval billedStudent = put("billing", bill)\nval deleteFromWaitlist = deleteItem("waitlist", PrimaryKey("email" -> student.email))\n\nval studentEnrollmentTransaction = (putStudent zip billedStudent zip deleteFromWaitlist).transact\n\nfor {\n  _ <- studentEnrollmentTransaction.execute\n} yield ()\n'})}),"\n",(0,i.jsx)(t.h3,{id:"readtransactions",children:"ReadTransactions"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:'final case class EnrolledClass(courseId: String, studentEmail: String)\n\nval avi = Student("avi@gmail.com", "maths")\nval maths101 = EnrolledClass("mth-101", avi.email)\nval maths102 = EnrolledClass("mth-102", avi.email)\n\nval putAvi = put("student", avi)\nval putClasses = put("enrolledClass", maths101) zip put("enrolledClass", maths102)\n\nval enrollAvi = (putAvi zip putClasses).transaction\n'})}),"\n",(0,i.jsx)(t.h2,{id:"transaction-failures",children:"Transaction Failures"}),"\n",(0,i.jsxs)(t.p,{children:["DynamoDBQueries using the ",(0,i.jsx)(t.code,{children:".transaction"})," method will fail at runtime if there are invalid transaction actions such as creating a table, scanning for items, or querying. The [DynamoDB documentation] has a limited number of actions that can be performed for either a read or a write transaction. There is a ",(0,i.jsx)(t.code,{children:".safeTransaction"})," method that is also available that will return ",(0,i.jsx)(t.code,{children:"Either[Throwable, DynamoDBQuery[A]]"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["There are more examples in our ",(0,i.jsx)(t.a,{href:"../dynamodb/src/it/scala/zio/dynamodb/LiveSpec.scala",children:"integration tests"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"valid-transact-write-items",children:"Valid Transact Write Items"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"PutItem"}),"\n",(0,i.jsx)(t.li,{children:"DeleteItem"}),"\n",(0,i.jsx)(t.li,{children:"BatchWriteItem"}),"\n",(0,i.jsx)(t.li,{children:"UpdateItem"}),"\n",(0,i.jsx)(t.li,{children:"ConditionCheck"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"valid-transact-get-item",children:"Valid Transact Get Item"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"GetItem"}),"\n",(0,i.jsx)(t.li,{children:"BatchGetItem"}),"\n"]})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>r});var a=n(96540);const i={},s=a.createContext(i);function l(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);